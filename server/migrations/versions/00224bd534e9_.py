"""empty message

Revision ID: 00224bd534e9
Revises: 1043d481acaa
Create Date: 2023-10-04 17:04:31.174919

"""
from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision = '00224bd534e9'
down_revision = '1043d481acaa'
branch_labels = None
depends_on = None


def upgrade(engine_name):
    globals()["upgrade_%s" % engine_name]()


def downgrade(engine_name):
    globals()["downgrade_%s" % engine_name]()





def upgrade_():
    # ### commands auto generated by Alembic - please adjust! ###
    pass
    # ### end Alembic commands ###


def downgrade_():
    # ### commands auto generated by Alembic - please adjust! ###
    pass
    # ### end Alembic commands ###


def upgrade_heartysoupsinternational():
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('prices')
    with op.batch_alter_table('users', schema=None) as batch_op:
        batch_op.add_column(sa.Column('price_multiplier', sa.Float(), nullable=False))

    # ### end Alembic commands ###


def downgrade_heartysoupsinternational():
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table('users', schema=None) as batch_op:
        batch_op.drop_column('price_multiplier')

    op.create_table('prices',
    sa.Column('id', sa.INTEGER(), nullable=False),
    sa.Column('product_id', sa.INTEGER(), nullable=True),
    sa.Column('user_id', sa.INTEGER(), nullable=True),
    sa.Column('price', sa.FLOAT(), nullable=False),
    sa.ForeignKeyConstraint(['product_id'], ['products.id'], name='fk_prices_product_id_products'),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name='fk_prices_user_id_users'),
    sa.PrimaryKeyConstraint('id')
    )
    # ### end Alembic commands ###


def upgrade_planterson():
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('prices')
    with op.batch_alter_table('users', schema=None) as batch_op:
        batch_op.add_column(sa.Column('price_multiplier', sa.Float(), nullable=False))

    # ### end Alembic commands ###


def downgrade_planterson():
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table('users', schema=None) as batch_op:
        batch_op.drop_column('price_multiplier')

    op.create_table('prices',
    sa.Column('id', sa.INTEGER(), nullable=False),
    sa.Column('product_id', sa.INTEGER(), nullable=True),
    sa.Column('user_id', sa.INTEGER(), nullable=True),
    sa.Column('price', sa.FLOAT(), nullable=False),
    sa.ForeignKeyConstraint(['product_id'], ['products.id'], name='fk_prices_product_id_products'),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name='fk_prices_user_id_users'),
    sa.PrimaryKeyConstraint('id')
    )
    # ### end Alembic commands ###


def upgrade_lentsplysproutona():
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('prices')
    with op.batch_alter_table('users', schema=None) as batch_op:
        batch_op.add_column(sa.Column('price_multiplier', sa.Float(), nullable=False))

    # ### end Alembic commands ###


def downgrade_lentsplysproutona():
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table('users', schema=None) as batch_op:
        batch_op.drop_column('price_multiplier')

    op.create_table('prices',
    sa.Column('id', sa.INTEGER(), nullable=False),
    sa.Column('product_id', sa.INTEGER(), nullable=True),
    sa.Column('user_id', sa.INTEGER(), nullable=True),
    sa.Column('price', sa.FLOAT(), nullable=False),
    sa.ForeignKeyConstraint(['product_id'], ['products.id'], name='fk_prices_product_id_products'),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name='fk_prices_user_id_users'),
    sa.PrimaryKeyConstraint('id')
    )
    # ### end Alembic commands ###


def upgrade_lentilcity():
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('prices')
    with op.batch_alter_table('users', schema=None) as batch_op:
        batch_op.add_column(sa.Column('price_multiplier', sa.Float(), nullable=False))

    # ### end Alembic commands ###


def downgrade_lentilcity():
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table('users', schema=None) as batch_op:
        batch_op.drop_column('price_multiplier')

    op.create_table('prices',
    sa.Column('id', sa.INTEGER(), nullable=False),
    sa.Column('product_id', sa.INTEGER(), nullable=True),
    sa.Column('user_id', sa.INTEGER(), nullable=True),
    sa.Column('price', sa.FLOAT(), nullable=False),
    sa.ForeignKeyConstraint(['product_id'], ['products.id'], name='fk_prices_product_id_products'),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name='fk_prices_user_id_users'),
    sa.PrimaryKeyConstraint('id')
    )
    # ### end Alembic commands ###


def upgrade_dclentil():
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('prices')
    with op.batch_alter_table('users', schema=None) as batch_op:
        batch_op.add_column(sa.Column('price_multiplier', sa.Float(), nullable=False))

    # ### end Alembic commands ###


def downgrade_dclentil():
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table('users', schema=None) as batch_op:
        batch_op.drop_column('price_multiplier')

    op.create_table('prices',
    sa.Column('id', sa.INTEGER(), nullable=False),
    sa.Column('product_id', sa.INTEGER(), nullable=True),
    sa.Column('user_id', sa.INTEGER(), nullable=True),
    sa.Column('price', sa.FLOAT(), nullable=False),
    sa.ForeignKeyConstraint(['product_id'], ['products.id'], name='fk_prices_product_id_products'),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name='fk_prices_user_id_users'),
    sa.PrimaryKeyConstraint('id')
    )
    # ### end Alembic commands ###

